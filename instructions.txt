- Install Angular CLI globally
    npm install -g @angular/cli
- Generate an Angular Project
    ng new conFusion --style=scss
- Move to the folder and start the server
    ng serve --open
- Configure with following installs
    npm install @angular/material --save
    npm install @angular/cdk --save
    npm install --save @angular/animations
    npm install --save @angular/flex-layout
    npm install --save hammerjs

    --legacy-peers-deps may be needed
- Configure to use material design icons, updating app module and app.component.html and global scss
- Generate a new component
    ng generate component menu
- Update tsconfig.json
    "compilerOptions": {
        "strictPropertyInitialization": false,
        ...
    }
- Create a Dish class in shared folder.
- Update menu.components.ts, menu.components.html, app.module.ts 
- Update with mat-grid-list and mat-card
- Add a new component dishdetail
- Create classes Dishes and Comments and place the DISHES object in the Dishes of shared folder.
- Use data binding to show a specific dish when selected.
- Add a service
    ng generate service services/dish
- The service is used to get DISHES. Update app.module.ts and menu.component.ts
- Install font awesome
    npm install font-awesome@4.7.0 --save
- Add a _variables.scss file in src folder
    $fa-font-path : '../node_modules/font-awesome/fonts';
- Generate and design header and footer component
- Generate components about, home, contact
- Generate app-routing module
    ng generate module app-routing
- Create a routes.ts file and code the routes
- Update the app-routing.ts file 
- Add <router-outlet> in the app.component.html
- Update the header links with the routerLink
- Code getDish(id) and getFeaturedDish() in the dish service
- Make promotion.ts (class) and promotions.ts (const) file
- Create a promotion service and write its functions and import it in AppModule
    ng generate service service/promotion
- Update the home component to show featured dish and promotion (ts and html file)
- Highlight the current component using routerLinkActive="active" class
- Update routes to take parameter in dishdetail
    { path: 'dishdetail/:id', component: DishdetailComponent },
- Update dishdetail as a separate page and not in menu
- Update dishdetail.ts to accept params and goBack function 
- Create a new Leader service and Leader class and LEADERS const.
- Use leader service to display leaders in about component
- Use leader service to display featured leader in home component